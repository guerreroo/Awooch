<!DOCTYPE HTML>
<html>
  <head>
    <link rel="stylesheet" type="text/css" href="../../static/awooch.css">
    <link rel="stylesheet" type="text/css" href="../../static/css/font-awesome.min.css">
    <link rel="shortcut icon" href="/static/favicon.ico">
    <title>Пост <%= id %> on awooch/<%= path %>/ Загрузка...</title>
    <script src="/static/common.js"></script>
    <meta name="viewport" content="width=device-width, initial-scale=1">
    <meta property="og:url" content="http://<%= settings.config['hostname']%>/<%= path %>/<%= id %>">
    <link rel="shortcut icon" href="/static/favicon.ico">
<style>
.redtext {
  display: inline-block;
}
.selected {
  border: 2px solid gold;
}
#hover {
  position: fixed;
  z-index: 10;
  background-color: black;
  border: 2px solid gold;
}
.post_number {
  font-size: 65%;
}
.id_link:hover {
  text-decoration: underline;
}
</style>
        <script>
          var select = function select(id) {
            var replace = function(hash) { history.replaceState(undefined, undefined, hash) }
            if (!history.replaceState) {
              replace = function(a, b, hash) { window.location.hash = hash; };
            }
            replace("#") // bugfix for webkit
            replace("#comment-" + id.toString()) // bugfix for webkit
            var elems = document.getElementsByClassName("selected");
            for (var i = 0; i < elems.length; i++) {
              elems[i].classList.toggle("selected")
            }
            document.getElementById("comment-" + id.toString()).classList.add("selected")
          }
          var hover = function hover(id, hovered) {
            var elem = document.getElementById("comment-" + id.toString());
            var hovered_elem = document.getElementById("comment-" + hovered.toString())
            hovered_elem.onmousemove = move;
            if (typeof(unitedPropertiesIf) != "undefined") return; // don't show #hover on mobile
            document.getElementById("hover").innerHTML = elem.innerHTML;
            document.getElementById("hover").style.display = "inline-block";
          }
          var unhover = function unhover() {
            document.getElementById("hover").innerHTML = ""
            document.getElementById("hover").style.display = "none";
          }
          var move = function move(e) {
            document.getElementById("hover").style.top = e.clientY + 5 + "px";
            document.getElementById("hover").style.left = e.clientX + 5 + "px";
          }
          var ol = function ol() {
            if (window.location.hash.indexOf("comment-") == 1) {
              select(window.location.hash.split("comment-")[1]);
            }
            <%= mobile_js %>
            var id = <%= id.to_i %>;
            if (typeof(unitedPropertiesIf) != "undefined") {
              unitedPropertiesIf.setProperty(board + ":" + id, total_number_of_posts.toString());
            } else {
              localStorage.setItem(board + ":" + id, total_number_of_posts.toString());
            }
            if (typeof(unitedPropertiesIf) == "undefined" || unitedPropertiesIf.getProperty("userscript").toUpperCase() == "TRUE") {
              Array.prototype.slice.call(document.getElementsByClassName("post_number"), 0).forEach(function(elem) {
                elem.style.display = "inline-block";
              })
            }
            Array.prototype.slice.call(document.getElementsByClassName("comment"), 0).forEach(makeClickable);
            Array.prototype.slice.call(document.getElementsByClassName("jshide"), 0).forEach(function(elem) {
              elem.style.display = "none";
            });
            Array.prototype.slice.call(document.getElementsByClassName("jsunhide"), 0).forEach(function(elem) {
              elem.style.display = "inline-block";
            });
            var e = document.getElementById("redirect");
            e.value = "false";
          }
          var makeClickable = function makeClickable(elem) {
            var child = elem.firstChild;
            if (child == null) return;
            do {
              if (child.nodeType == Node.TEXT_NODE) {
                child.data.replace(/https?:\/\/[^\s]+/, function(all) {
                  var args = Array.prototype.slice.call(arguments);
                  var offset = args[args.length - 2];
                  var newNode = child.splitText(offset);
                  newNode.data = newNode.data.substr(all.length)
                  var a = document.createElement("a");
                  a.href = all;
                  a.innerText = all;
                  a.style.fontSize = "18px"
                  a.style.display = "inline-block";
                  a.style.textAlign = "left";
                  child.parentNode.insertBefore(a, child.nextSibling);
                  child = newNode;
                })
              } else {
                makeClickable(child);
              }
            } while (child = child.nextSibling)
          }
          var submit_form = function submit_form(form, route) {
            var data = new FormData(form);
            // Ask @lain for what this does
            // unless you need to know what it does because you're a spamfag, in which case get fucked
            var _0x288ea4=window[atob("ZGVjb2RlVVJJ")],_0x16a13a=window[_0x288ea4("%61%74%6f%62")],_0x2a56e0=document[_0x16a13a(_0x288ea4("%5a%32%56%30%52%57%78%6c%62%57%56%75%64%45%4a%35%53%57%51="))](_0x288ea4(_0x16a13a("JTczJTc1JTYyJTZkJTY5JTc0"))),_0x73e5=[_0x288ea4("%69%6e%6e%65%72%54%65%78%74"),_0x288ea4("%53%65%6e%64%69%6e%67%2e%2e%2e"),_0x288ea4("%64%69%73%61%62%6c%65%64")],p=Math[_0x288ea4("%72%61%6e%64%6f%6d")]()>.5,q=Math[_0x16a13a(_0x16a13a("Y21GdVpHOXQ="))]()<.5;(function(_0x219a0a,_0x2e56a0){var _0x16e13e=function(_0x28a60f){while(--_0x28a60f){_0x219a0a['push'](_0x219a0a['shift']());}};_0x16e13e(++_0x2e56a0);}(_0x73e5,0xc5));var _0x573e=function(_0x1db026,_0x11a305){_0x1db026=_0x1db026-0x0;var _0x288ae4=_0x73e5[_0x1db026];return _0x288ae4;};_0x2a56e0[_0x573e('0x0')]=!(p&&!(p||(p&&q)))||((q&&(q||p))&&!q);_0x2a56e0[_0x573e('0x1')]=_0x573e('0x2');
            var xhr = new XMLHttpRequest();
            xhr.onreadystatechange = function() {
                if (xhr.readyState == 4) {
                  if (xhr.status != 200) {
                    alert("errno = -EINVAL; return;\n\n" + xhr.responseText)
                  }
                  window.location.reload();
                }
            }
            xhr.open("POST", route);
            xhr.send(data);
            document.getElementById("reply_box").value = "";
          }
        </script>
  </head>
  <body onLoad='ol();'>
    <div id="sitecorner">
      <a href="/<%= path %>"><img src="<%= banner %>" alt="Ауч"></a>
      <span id="hover" class="comment" style="display: none"></span>
      <% last_date_modified = 0 %>
      <% i = 0 %>
      <% is_locked = false %>
      <% get_thread_replies(id.to_i.to_s, session, config).each do |res| %>
        <% if i == 0 then %>
          <% is_locked = res[:is_locked] %>
          <% if path == "burg" then %>
            <div id="title">burg</div>
          <% else %>
            <div id="title"><%= Sanitize.clean(res[:title]) %></div>
          <% end %>
          <script>
            var board = <%= JSON.dump(res[:board]) %>;
            document.title = <%= JSON.dump(res[:title]) %> + " - awooch/" + board + "/";
          </script>
          <%# I WILL MOVE IT LATER I PROMISE %>
          <meta property="og:title" content="<%= Sanitize.clean(res[:title]) %> - /<%= res[:board] %>/">
          <meta property="og:description" content="<%= Sanitize.clean(res[:comment]) %>">
          <% if moderator and res[:sticky] and has_permission(session, config, "sticky") then %>
            <form id="sticky-form" action="/sticky/<%= res[:post_id] %>" method="POST" style="color: white;">
              Adjust Stickynes
              <input type="number" name="stickyness" value="<%= res[:stickyness] %>" />
            </form>
            <button onClick="submit_form(document.getElementById('sticky-form'), '/sticky/<%= res[:post_id] %>')">Отправить</button>
          <% end %>
        <% end %>
        <div class="comment" id="comment-<%= res[:post_id] %>">
          <% if path == "burg" then %>
            <% if res[:comment] == "burg" then %>
              <img class="burg" src="/static/burg.jpg" />
            <% else %>
              <img class="burg" src="/static/angryburg.jpg" />
            <% end %>
            <% i += 1 %>
            </div> <%# close .comment div %>
            <% next %>
          <% end %>
          <% if res[:capcode] %>
            <div class="redtext">##<%= res[:capcode] %>##</div><br>
          <% end %>
          <% if moderator and has_permission(session, config, "delete") then %>
            <i class="fa fa-trash offset-left" aria-hidden="true" onClick='deletePost(<%= res[:post_id] %>)'></i>
          <% end %>
          <% if moderator and has_permission(session, config, "view_ips") then %>
            <a style="display: inline-block; font-size: 50%;" href="/ip/<%= res[:ip] %>"><%= res[:ip] %></a>
          <% end %>
          <span class="post_number" style="display: none;">Пост #<span class="id_link" onClick='document.getElementById("reply_box").innerText += ">><%= res[:post_id] %>"'><%= res[:post_id] %></span><!--, ID: <span style="color: #<%= res[:hash] %>;"><%= res[:hash] %></span>--></span><br>
          |
          <% res[:comment].split("\n").each do |line| %>
            <% line = line.chomp %>
            <%
              consecutive = 1
              j = 0
              line.split(">").each do |x|
                # If we haven't hit the first > yet, then display it normally (no red text)
                if j == 0
                  %><%= Sanitize.clean(x) %><%
                else
                  # If we've hit the second > in a row, and it's not immediately followed by a third >, it's a link to a thread
                  # either in the format >>1234 or >>/board/1234, where the first one must be in the current thread and the second
                  # one must be an OP on that board
                  if x.length > 0 and consecutive == 3
                    x_split = x.split(" ")
                    target = x_split[0].split("/")
                    if target.length == 1 then
                      # it's in the format >>1234
                      orig_target = target[0]
                      target[0] = target[0].to_i.to_s # sanitize so they don't inject javascriot
                      %><a class="redtext" onMouseOver="hover(<%= target[0] %>, <%= res[:post_id] %>)" onMouseOut="unhover()" onClick="select(<%= target[0] %>)">&gt;<%= Sanitize.clean(orig_target) %></a> <%= Sanitize.clean(x_split[1..(x_split.length - 1)].join(" ")) %></a><%
                    else
                      # it's in the format >>/board/1234, so extract `board` and `1234` and make the link
                      target_board = Sanitize.clean(target[1]).gsub("\"", "")
                      target_thread = target[2].to_i.to_s
                      href = "/" + target_board.to_s + "/thread/" + target_thread.to_s
                      %><a class="redtext" href="<%= href %>">&gt;<%= Sanitize.clean(x_split[0]) %></a> <%= Sanitize.clean(x_split[1..(x_split.length - 1)].join(" ")) %></a><%
                    end
                  elsif x.length > 0 and consecutive == 4 then
                    # If we've hit the third > in a row, and it's not immediately followed by a fourth >, it's a link to another board
                    # in the format >>/board/ or >>board
                    x_split = x.split(" ")
                    target_board_split = x_split[0].split("/")
                    # Assume >>/board/ at first
                    target_board = target_board_split[1]
                    if target_board_split.length == 1 then
                      # if there were no slashes in the first word, assume >>board
                      target_board = target_board_split[0]
                    end
                    # make the link
                    %><a class="redtext" href="/<%= target_board %>">&gt;<%= Sanitize.clean(x_split[0]) %></a> <%= Sanitize.clean(x_split[1..(x_split.length - 1)].join(" ")) %></a><%
                  else
                    # it's some other form of red text, just display it as red text
                    %><span class="redtext redtext-<%= consecutive %>">&gt;<%= Sanitize.clean(x) %></span><%
                  end
                end
                # calculations for the number of consecutive > characters
                if x.length == 0 then
                  consecutive += 1
                else
                  consecutive = 2
                end
                # counter, largely unused now that I have the `consecutive` variable
                j += 1
              end
            %>
            <br />
          <% end %>
        </div>
        <br />
        <% last_date_modified = res[:date_posted] %>
        <% i += 1 %>
      <% end %>

      <div style="font-size: 11px;" class="comment">
        Всего ответов: <%= i.to_s %>,
        <script>
          var total_number_of_posts = <%= i.to_s %>;
        </script>
        последний запощен:
        <span id='date_last_modified'>
          <%= Time.new(last_date_modified).strftime '%c' %>
        </span>
      </div>
      <script>
        var d = new Date(parseInt(<%= JSON.dump(last_date_modified.to_s) %> + "000"));
        document.getElementById("date_last_modified").innerHTML = d.toString();
      </script>
      <br />
      <% if is_locked then %>
        <div id="lockedcontainer" style="text-align: center;">
          <div class="redtext">This thread is closed.</div>
          <% if moderator and has_permission(session, config, "lock") %>
            <i class="fa fa-lock" aria-hidden="true" onClick='unlockPost(<%= id.to_i.to_s %>)'></i>
          <% end %>
        </div>
      <% else %>
        <a href="javascript:location.reload();">Обновить</a>
        <form id="form" action='/reply' method='post' style="text-align: center;">
          <input type='text' style='display: none' name='board' id='board' value='<%= path %>' />
          <input type='text' style='display: none' name='parent' id='parent' value='<%= id %>' />
          <br />
          <%# Janitors of at least one board can capcode on ANY board %>
          <% if session[:username] %>
            <%= erb :capcode_dropdown, :locals => {:config => config, :session => session} %>
          <% end %>
          <% if path == "burg" %>
            <input type="radio" value="burg" id="burg" name="content" /><label style="color: white" for="burg">burg</label>
          <br />
            <input type="radio" value="angry burg" id="angry_burg" name="content" /><label style="color: white" for="angry_burg">angry burg</label>
            <br />
          <% else %>
            <textarea id="reply_box" name='content' style="width: 100%;" placeholder='Ответ'></textarea>
          <% end %>
          <input class="jshide" type="submit" value="Ответить без js" />
          <input style="display: none" type="text" name="redirect" id="redirect" value="true" />
        </form>
        <button class="button_styled jsunhide" style="float: right; display: none;" onClick='submit_form(document.getElementById("form"), "/reply")' id="submit">Ответить</button><br />
        <% if moderator and has_permission(session, config, "lock") %>
          <br />
          <i class="fa fa-unlock-alt" aria-hidden="true" style="display: block; text-align: center;" onClick='lockPost(<%= id.to_i.to_s %>)'></i>
        <% end %>
      <% end %>
    </div>
    <footer class="comment" style="font-size: xx-small; text-align: center;">
      <%= config["footer"] %>, <a href="http://github.com/" style="font-size: x-small;">Ауч! <%= settings.awoo_version %></a>
    </footer>
  </body>
</html>
